"use strict";var ApplicationConfiguration=function(){var applicationModuleName="gambit",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","btford.socket-io"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("bets"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("users"),angular.module("bets").config(["$stateProvider",function($stateProvider){$stateProvider.state("listBets",{url:"/bets",templateUrl:"modules/bets/views/list-bets.client.view.html"}).state("createBet",{url:"/bets/create",templateUrl:"modules/bets/views/create-bet.client.view.html"}).state("editBet",{url:"/bets/:betId/edit",templateUrl:"modules/bets/views/edit-bet.client.view.html"})}]),angular.module("bets").controller("BetsController",["$scope","$stateParams","$location","Authentication","Bets","Socket","$timeout",function($scope,$stateParams,$location,Authentication,Bets,Socket,$timeout){$scope.authentication=Authentication,$scope.betNotifications=[];var betsCtrl=this;Bets.query({challengee:Authentication.user._id,isSeen:!1},function(response){$scope.betNotifications=response}),$scope.acceptedBets=[],betsCtrl.fillForm=function(user){betsCtrl.challengee=user,betsCtrl.formState=!0},Socket.on("bet.created",function(bet){bet.challengee===Authentication.user._id&&Bets.get({betId:bet._id},function(res){$scope.betNotifications.push(res)})}),Socket.on("bet.accepted",function(bet){bet.challenger._id===Authentication.user._id&&Bets.get({betId:bet._id},function(res){$scope.acceptedBets.push(res)})}),betsCtrl.showAlert=!1,$scope.setVal=function(){betsCtrl.showAlert=!betsCtrl.showAlert},$scope.showFeedback=function(msg){$scope.setVal(),betsCtrl.message=msg,$timeout($scope.setVal,3e3)},betsCtrl.create=function(){if(""===betsCtrl.title.trim()||isNaN(parseInt(betsCtrl.stake,10)))return void $scope.showFeedback("invalid user input");var bet=new Bets({title:betsCtrl.title,challengee:betsCtrl.challengee._id,stake:parseInt(betsCtrl.stake)});betsCtrl.title=null,betsCtrl.stake=null,bet.$save(function(){betsCtrl.formState=!1,$scope.showFeedback("Bet Challenge Created...")},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("bets").controller("BetGameController",["$scope","$stateParams","$location","Authentication","Socket","Bets","$timeout","obj","Users",function($scope,$stateParams,$location,Authentication,Socket,Bets,$timeout,obj,Users){$scope.showPane=!1,$scope.postGenerationTime=100,$scope.countdownNum=60,$scope.bet=obj,$scope.wonBet=null,Socket.on("bet.begun",function(bet){$scope.isOnline=bet.isBegun}),Socket.on("bet.scored",function(bet){$scope.scoredBet=bet,$scope.getWinner()}),$scope.startGame=function(){return $scope.user=Users.get({userId:Authentication.user._id},function(res){res.points-=$scope.bet.stake,res.stakedPoints+=$scope.bet.stake,res.$update()}),$scope.bet.challenger._id===Authentication.user._id?($scope.player="challenger",$scope.bet.isBegun=!0,void $scope.bet.$update(function(){$scope.bet.isEnded||($scope.showCountdown=!1,$scope.showGameEnv=!0)})):($scope.bet.challengee._id===Authentication.user._id&&($scope.player="challengee",$scope.bet.isAccepted=!0,$scope.bet.$update(function(){})),$scope.showCountdown=!0,void $scope.countdown())},$scope.countdown=function(){return $scope.countdownNum--,$scope.countdownNum<=0?void($scope.gameCancelled=!0):$scope.isOnline?($scope.showCountdown=!1,void($scope.showGameEnv=!0)):void $timeout($scope.countdown,1e3)},$scope.generateDiceNumber=function(){$scope.diceNumber=Math.floor(100*Math.random()),$scope.showNumberGenerationIllusion=!0,$scope.managePostDiceNumberGenerationDelay()},$scope.managePostDiceNumberGenerationDelay=function(){return $scope.postGenerationTime--,$scope.illusiveNumber=Math.floor(100*Math.random()),$scope.postGenerationTime<=0?($scope.showNumberGenerationIllusion=!1,$scope.showDiceNumber=!0,void $scope.recordScore()):($scope.tweaked&&($scope.postGenerationTime=200,$scope.tweaked=!1,$scope.tweakDiceNumber()),void $timeout($scope.managePostDiceNumberGenerationDelay,100))},$scope.tweakDiceNumber=function(){$scope.diceNumber>=30?$scope.diceNumber-=10:$scope.diceNumber<30&&($scope.diceNumber+=10)},$scope.recordScore=function(){Bets.get({betId:$scope.bet._id},function(res){$scope.bet=res,$scope.bet[$scope.player+"Score"]=$scope.diceNumber,$scope.bet.$update(function(res){console.log("recordScore is working",res)})})},$scope.getWinner=function(){Math.max($scope.scoredBet.challengeeScore,$scope.scoredBet.challengerScore)!==$scope.scoredBet[$scope.player+"Score"]?($scope.winnerMsg="You Lost!!!",$scope.user.points-=$scope.scoredBet.stake,$scope.user.stakedPoints-=$scope.scoredBet.stake):($scope.winnerMsg="You Won!!!",$scope.user.points+=2*$scope.scoredBet.stake,$scope.user.stakedPoints-=$scope.scoredBet.stake),$scope.user.update(function(){}),$scope.showWinner=!0},$scope.startGame()}]),angular.module("bets").factory("Bets",["$resource",function($resource){return $resource("bets/:betId",{betId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("core").factory("Socket",["socketFactory",function(socketFactory){return socketFactory({prefix:"",ioSocket:io.connect("http://localhost:3000")})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"}).state("users",{url:"/users",templateUrl:"modules/users/views/users.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("UserQueryController",["$scope","$stateParams","$location","Authentication","Users",function($scope,$stateParams,$location,Authentication,Users){$scope.authentication=Authentication;var _this=this;this.fillForm=function(userID,username){_this.state=!0,_this.userID=userID,_this.username=username},$scope.submitSearch=function(){var search=$scope.search;$scope.search="","/users"===$location.path()?($location.search({query:search}),$scope.find()):$location.path("users").search({query:search})},$scope.find=function(){Users.query($location.search(),function(res){$scope.users=res})},$scope.findOne=function(){$scope.article=Users.get({articleId:$stateParams.articleId})}}]),angular.module("bets").controller("ModalDemoCtrl",["$scope","$modal","$log",function($scope,$modal,$log){$scope.open=function(size,templateUrl,controller,obj){var modalInstance=$modal.open({templateUrl:templateUrl,controller:controller,size:size,resolve:{obj:function(){return obj}}});modalInstance.result.then(function(selectedItem){$scope.selected=selectedItem},function(){$log.info("Modal dismissed at: "+new Date)})}}]),angular.module("bets").controller("ModalInstanceCtrl",["$scope","$modalInstance","$location","obj","Bets","$stateParams","Authentication","Socket",function($scope,$modalInstance,$location,obj){$scope.notification=obj,$scope.notification.isSeen=!0,$scope.notification.$update(function(){}),$scope.ok=function(){$modalInstance.close($scope.selected.item)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);